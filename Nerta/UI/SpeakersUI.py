import streamlit as st
import time

from gspread.utils import rowcol_to_a1

from Nerta.Handlers.SpeakersH import SpeakersHandler
from Nerta.DBModule import DatabaseModule


def chage_flag():
    current_flag = st.session_state['UserSettings']['speakers_flag']
    st.session_state['UserSettings']['speakers_flag'] = not current_flag

    db = DatabaseModule()
    db.upd_user_settings('user_settings', st.session_state['UserSettings']['login'], 
                         {'speakers_flag': not current_flag})


title = '–°–ø–∏–∫–µ—Ä—ã'
speakers_h = SpeakersHandler(title)
gs_data = speakers_h.get_data_safe()
speakers_h.gs_data = gs_data
speakers_h.speakers_data = speakers_h.get_speakers_data()
df = speakers_h.fill_df()

col1, col2 = st.columns([0.15, 0.85])

# –°–≤–æ–¥–∫–∞ –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º
with col1.expander('–°–≤–æ–¥–∫–∞ –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º', icon=':material/person_check:'):
    deep_scan = st.toggle('–û—Ç—Å–µ—è—Ç—å —Å–ø–∏–∫–µ—Ä–æ–≤ –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤?', 
                          value=st.session_state['UserSettings']['speakers_flag'], 
                          on_change=chage_flag)

    totals_df = {'–í—Å–µ–≥–æ': len(gs_data), 
                 '–ë–µ–∑ –∞–Ω–∫–µ—Ç—ã': speakers_h.get_count_no_form(deep_scan, df), 
                 '–ë–µ–∑ –∫–∞—Ä—Ç–æ—á–∫–∏': speakers_h.get_count_no_card(deep_scan, df), 
                 '–ë–µ–∑ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è': speakers_h.get_count_no_agree(deep_scan, df)}
    totals_df = speakers_h.to_pandas([totals_df]).T
    totals_df.columns = ['–ó–Ω–∞—á–µ–Ω–∏–µ']
    totals_df.index.name = '–°–ø–∏–∫–µ—Ä–æ–≤'

    st.dataframe(totals_df)

# –¢–∞–±–ª–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å–ø–∏–∫–µ—Ä–æ–≤
with col2.expander('–¢–∞–±–ª–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å–ø–∏–∫–µ—Ä–æ–≤', icon=':material/dataset:'):
    pd_df = speakers_h.to_pandas(df)
    pd_df.index.name = '–°—Ç—Ä–æ–∫–∞'
    pd_df.index += 2
    st.dataframe(pd_df)

# –§–æ—Ä–º—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π
with st.expander('–§–æ—Ä–º—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π', icon=':material/checkbook:'):
    with st.form('Form_add_speaker', clear_on_submit=True):
        st.markdown(':red[–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–∞ –≤ –ë–î]')
        name = st.text_input('–°–ø–∏–∫–µ—Ä', placeholder='–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á')
        flag = st.toggle('–°–ø–∏–∫–µ—Ä –±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏')

        if st.form_submit_button('–î–æ–±–∞–≤–∏—Ç—å', icon=':material/add:'):
            try:
                if not flag:
                    l_name, f_name, m_name = name.strip().split(' ')
                else:
                    l_name, f_name = name.strip().split(' ')
            except ValueError:
                st.warning('–ü–æ–ª–µ –Ω–µ–≤–µ—Ä–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!', 
                            icon=':material/warning:')
                st.stop()

            if not speakers_h.validate_speaker(name, df):
                speakers_h.add_speaker(name)
                speakers_h.upd_cache()
                
                with st.spinner('–°–ø–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', show_time=True):
                    time.sleep(3)
                
                st.rerun()
            else: st.error(f'–ù–µ –≤—ã—à–ª–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏–∫–µ—Ä–∞! {name} ' + 
                           '—É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ', icon='üö®')
    
    with st.form('Form_edit_speaker_data', clear_on_submit=True):
        st.markdown(':red[–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É —Å–ø–∏–∫–µ—Ä–∞]')
        name = st.selectbox('–°–ø–∏–∫–µ—Ä', options=df['–°–ø–∏–∫–µ—Ä'])
        types = ('–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π', '–ï—Å—Ç—å', '–ù–µ—Ç')
        col_1, col_2, col_3, col_4 = st.columns(4)

        with col_1:
            form = st.selectbox('–ê–Ω–∫–µ—Ç–∞', options=types)
            card = st.selectbox('–ö–∞—Ä—Ç–æ—á–∫–∞', options=types)
        
        with col_2:
            id_ = st.selectbox('–ü–∞—Å–ø–æ—Ä—Ç', options=types)
            visa = st.selectbox('–ü—Ä–æ–ø–∏—Å–∫–∞', options=types)
        
        with col_3:
            inn = st.selectbox('–ò–ù–ù', options=types)
            snils = st.selectbox('–°–ù–ò–õ–°', options=types)
        
        with col_4:
            details = st.selectbox('–†–µ–∫–≤–∏–∑–∏—Ç—ã', options=types)
            agreement = st.selectbox('–°–æ–≥–ª–∞—à–µ–Ω–∏–µ', options=types)
        
        if st.form_submit_button('–ò–∑–º–µ–Ω–∏—Ç—å', icon=':material/edit:'):
            cell = speakers_h.find_name(name)
            fields = [(2, form), (3, card), (4, id_), (5, visa), 
                      (6, inn), (7, snils), (8, details), (9, agreement)]
            updates = []
            
            for col, val in fields:
                if val != '–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π':
                    updates.append({'range': f'{rowcol_to_a1(cell.row, col)}', 
                                    'values': [[val]]})
            
            if updates:
                speakers_h.upd_speaker_data(updates)
                speakers_h.upd_cache()

                with st.spinner('–ò–∑–º–µ–Ω–µ–Ω–∏—è –±—ã–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã', show_time=True):
                    time.sleep(3)
                
                st.rerun()
            else: st.warning('–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å', icon=':material/warning:')
